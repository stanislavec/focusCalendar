{"version":3,"sources":["components/AutoSizeInput.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["StyledLabel","styled","animated","label","StyledTextareaAutosize","TextareaAutosize","width","padding","background","fontSize","isLongContent","border","borderBottom","color","resize","outline","AutoSizeInputWrapper","div","AutoSizeInput","forwardRef","ref","defaultValue","value","tabIndex","autoFocus","onFocus","onBlur","onClick","onChange","textAreaProps","useState","areaValue","setAreaValue","isFocused","setIsFocused","wasChanged","setWasChanged","setIsLongContent","useEffect","length","onAreaFocus","onAreaBlur","showLabelBottom","Boolean","animProps","useSpring","config","duration","bottom","style","event","target","onKeyUp","e","keyCode","current","blur","tag","App","nameOfMeeting","React","createRef","location","agenda","className","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0oBAmBA,IAAMA,EAAcC,YAAOC,IAASC,MAAhBF,CAAH,KASXG,EAAyBH,YAAOI,IAAPJ,EAE7B,kBAAwB,CACtBK,MAAO,OACPC,QAAS,QACTC,WAAY,cACZC,SAJF,EAAGC,cAIyB,OAAS,OAEnCC,OAAQ,wBACRC,aAAc,kBACdC,MAAO,QAEPC,OAAQ,OACRC,QAAS,WAIPC,EAAuBf,IAAOgB,IAAV,KASbC,EAA+CC,sBAC1D,WAYEC,GACI,IAXFC,EAWC,EAXDA,aACAC,EAUC,EAVDA,MACAnB,EASC,EATDA,MACAoB,EAQC,EARDA,SACAC,EAOC,EAPDA,UACAC,EAMC,EANDA,QAEAC,GAIC,EALDC,QAKC,EAJDD,QACAE,EAGC,EAHDA,SAIIC,EAAgB,CAAEP,QAAOD,eAAcG,YAAWD,YADrD,EAE+BO,mBAASR,GAFxC,mBAEIS,EAFJ,KAEeC,EAFf,OAG+BF,mBAASN,GAHxC,mBAGIS,EAHJ,KAGeC,EAHf,OAIiCJ,oBAAS,GAJ1C,mBAIIK,EAJJ,KAIgBC,EAJhB,OAKuCN,oBAAS,GALhD,mBAKIpB,EALJ,KAKmB2B,EALnB,KAOHC,qBAAU,WACJhB,GAAOe,EAAiBf,EAAMiB,QAAU,KACvCjB,GAASD,GAAcgB,EAAiBhB,EAAakB,QAAU,MAEnE,IAEH,IAAMC,EAAc,WAClBN,GAAa,GACTT,GAASA,KAGTgB,EAAa,WACjBP,GAAa,GACTR,GAAQA,KAkBRgB,EAAkBC,QACtBV,GAAaF,IAAeI,GAAcd,GAGtCuB,EAAYC,YAAU,CAC1BC,OAAQ,CAAEC,SAAU,KACpBC,OAAQN,EAAkB,QAAU,OACpCjC,SAAUiC,EAAkB,OAAS,SAGvC,OACE,kBAAC1B,EAAD,KACGb,GAAS,kBAACH,EAAD,CAAaiD,MAAOL,GAAYzC,GAC1C,kBAACC,EAAD,eACEqB,QAAS,kBAAMe,KACfd,OAAQ,kBAAMe,MACVZ,EAHN,CAIED,SAhCe,SAACsB,GACpBb,EAAiBa,EAAMC,OAAO7B,MAAMiB,QAAU,IAC9CP,EAAakB,EAAMC,OAAO7B,OAC1Bc,GAAc,GACVR,GACFA,EAASsB,EAAMC,OAAO7B,QA4BpB8B,QAAS,SAACC,GAvBE,KAuByBA,EAAEC,SAtBxClC,EAAYmC,QAAQC,QAwBnB9C,cAAeA,EACfU,IAAK,SAACqC,GAAD,OAAWrC,EAAYmC,QAAUE,U,MCpGjCC,MAvBf,WACE,IAAMC,EAAgBC,IAAMC,YACtBC,EAAWF,IAAMC,YACjBE,EAASH,IAAMC,YACrB,OACE,yBAAKG,UAAU,OACb,kBAAC9C,EAAD,CACEM,WAAS,EACTD,SAAS,IACTH,IAAKuC,EACLxD,MAAM,oBAER,kBAACe,EAAD,CAAeK,SAAS,IAAIH,IAAK0C,EAAU3D,MAAM,oBACjD,kBAACe,EAAD,CACEK,SAAS,IACTH,IAAK2C,EACL1C,aAAa,uHACblB,MAAM,aCTMwC,QACW,cAA7BsB,OAAOH,SAASI,UAEe,UAA7BD,OAAOH,SAASI,UAEhBD,OAAOH,SAASI,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD8HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.23bd2926.chunk.js","sourcesContent":["import React, { useState, forwardRef, useEffect } from 'react';\nimport styled from '@emotion/styled';\nimport { useSpring, animated } from 'react-spring';\nimport TextareaAutosize from 'react-textarea-autosize';\n\ninterface IAutoSizeInputProps {\n  tabIndex?: string;\n  ref?: any;\n  label?: string;\n  defaultValue?: string;\n  value?: string;\n  autoFocus?: boolean;\n  onChange?: (value: string) => void;\n  onFocus?: () => void;\n  onClick?: () => void;\n  onBlur?: () => void;\n}\n\n//@ts-ignore\nconst StyledLabel = styled(animated.label)`\n  position: absolute;\n  height: 28px;\n  left: 10px;\n  opacity: 0.6;\n  color: white;\n  z-index: -1;\n`;\n\nconst StyledTextareaAutosize = styled(TextareaAutosize)(\n  // @ts-ignore\n  ({ isLongContent }) => ({\n    width: '100%',\n    padding: '5px 0',\n    background: 'transparent',\n    fontSize: isLongContent ? '14px' : '22px',\n\n    border: '2px solid transparent',\n    borderBottom: '2px solid white',\n    color: 'white',\n\n    resize: 'none',\n    outline: 'none',\n  })\n);\n\nconst AutoSizeInputWrapper = styled.div`\n  width: 350px;\n\n  position: relative;\n  padding: 10px 10px 20px 10px;\n  margin-bottom: 20px;\n  z-index: 0;\n`;\n\nexport const AutoSizeInput: React.FC<IAutoSizeInputProps> = forwardRef(\n  (\n    {\n      defaultValue,\n      value,\n      label,\n      tabIndex,\n      autoFocus,\n      onFocus,\n      onClick,\n      onBlur,\n      onChange,\n    },\n    ref\n  ) => {\n    const textAreaProps = { value, defaultValue, autoFocus, tabIndex };\n    const [areaValue, setAreaValue] = useState(value);\n    const [isFocused, setIsFocused] = useState(autoFocus);\n    const [wasChanged, setWasChanged] = useState(false);\n    const [isLongContent, setIsLongContent] = useState(false);\n\n    useEffect(() => {\n      if (value) setIsLongContent(value.length >= 40);\n      if (!value && defaultValue) setIsLongContent(defaultValue.length >= 40);\n      // eslint-disable-next-line\n    }, []);\n\n    const onAreaFocus = () => {\n      setIsFocused(true);\n      if (onFocus) onFocus();\n    };\n\n    const onAreaBlur = () => {\n      setIsFocused(false);\n      if (onBlur) onBlur();\n    };\n\n    const onAreaChange = (event: any) => {\n      setIsLongContent(event.target.value.length >= 40);\n      setAreaValue(event.target.value);\n      setWasChanged(true);\n      if (onChange) {\n        onChange(event.target.value);\n      }\n    };\n\n    const manageKeyboardEvents = (keyCode: number) => {\n      if (keyCode === 27) {\n        (ref as any).current.blur();\n      }\n    };\n\n    const showLabelBottom = Boolean(\n      isFocused || areaValue || (!wasChanged && defaultValue)\n    );\n\n    const animProps = useSpring({\n      config: { duration: 150 },\n      bottom: showLabelBottom ? '-11px' : '30px',\n      fontSize: showLabelBottom ? '14px' : '22px',\n    });\n\n    return (\n      <AutoSizeInputWrapper>\n        {label && <StyledLabel style={animProps}>{label}</StyledLabel>}\n        <StyledTextareaAutosize\n          onFocus={() => onAreaFocus()}\n          onBlur={() => onAreaBlur()}\n          {...textAreaProps}\n          onChange={onAreaChange}\n          onKeyUp={(e) => manageKeyboardEvents(e.keyCode)}\n          // @ts-ignore\n          isLongContent={isLongContent}\n          ref={(tag) => ((ref as any).current = tag)}\n        />\n      </AutoSizeInputWrapper>\n    );\n  }\n);\n","import React from 'react';\nimport { AutoSizeInput } from './components';\nimport './App.css';\n\nfunction App() {\n  const nameOfMeeting = React.createRef();\n  const location = React.createRef();\n  const agenda = React.createRef();\n  return (\n    <div className=\"App\">\n      <AutoSizeInput\n        autoFocus\n        tabIndex=\"1\"\n        ref={nameOfMeeting}\n        label=\"Name of Meeting\"\n      />\n      <AutoSizeInput tabIndex=\"2\" ref={location} label=\"Location / Call\" />\n      <AutoSizeInput\n        tabIndex=\"3\"\n        ref={agenda}\n        defaultValue=\"Значение по умолчанию\"\n        label=\"Agenda\"\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}